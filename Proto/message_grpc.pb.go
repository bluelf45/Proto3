// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: Proto/message.proto

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MessageServiceClient is the client API for MessageService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MessageServiceClient interface {
	//Guardianes
	GetSoldados(ctx context.Context, in *SoldierRequest, opts ...grpc.CallOption) (*SoldierAnswer, error)
	//broker
	Redirect(ctx context.Context, in *Address, opts ...grpc.CallOption) (*Address, error)
	//Vanguardia
	AddBase(ctx context.Context, in *Base, opts ...grpc.CallOption) (*VectorClock, error)
	RenameBase(ctx context.Context, in *Rename, opts ...grpc.CallOption) (*VectorClock, error)
	UpdateValue(ctx context.Context, in *Base, opts ...grpc.CallOption) (*VectorClock, error)
	DeleteBase(ctx context.Context, in *Base, opts ...grpc.CallOption) (*VectorClock, error)
}

type messageServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMessageServiceClient(cc grpc.ClientConnInterface) MessageServiceClient {
	return &messageServiceClient{cc}
}

func (c *messageServiceClient) GetSoldados(ctx context.Context, in *SoldierRequest, opts ...grpc.CallOption) (*SoldierAnswer, error) {
	out := new(SoldierAnswer)
	err := c.cc.Invoke(ctx, "/main.MessageService/GetSoldados", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServiceClient) Redirect(ctx context.Context, in *Address, opts ...grpc.CallOption) (*Address, error) {
	out := new(Address)
	err := c.cc.Invoke(ctx, "/main.MessageService/Redirect", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServiceClient) AddBase(ctx context.Context, in *Base, opts ...grpc.CallOption) (*VectorClock, error) {
	out := new(VectorClock)
	err := c.cc.Invoke(ctx, "/main.MessageService/AddBase", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServiceClient) RenameBase(ctx context.Context, in *Rename, opts ...grpc.CallOption) (*VectorClock, error) {
	out := new(VectorClock)
	err := c.cc.Invoke(ctx, "/main.MessageService/RenameBase", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServiceClient) UpdateValue(ctx context.Context, in *Base, opts ...grpc.CallOption) (*VectorClock, error) {
	out := new(VectorClock)
	err := c.cc.Invoke(ctx, "/main.MessageService/UpdateValue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServiceClient) DeleteBase(ctx context.Context, in *Base, opts ...grpc.CallOption) (*VectorClock, error) {
	out := new(VectorClock)
	err := c.cc.Invoke(ctx, "/main.MessageService/DeleteBase", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MessageServiceServer is the server API for MessageService service.
// All implementations must embed UnimplementedMessageServiceServer
// for forward compatibility
type MessageServiceServer interface {
	//Guardianes
	GetSoldados(context.Context, *SoldierRequest) (*SoldierAnswer, error)
	//broker
	Redirect(context.Context, *Address) (*Address, error)
	//Vanguardia
	AddBase(context.Context, *Base) (*VectorClock, error)
	RenameBase(context.Context, *Rename) (*VectorClock, error)
	UpdateValue(context.Context, *Base) (*VectorClock, error)
	DeleteBase(context.Context, *Base) (*VectorClock, error)
	mustEmbedUnimplementedMessageServiceServer()
}

// UnimplementedMessageServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMessageServiceServer struct {
}

func (UnimplementedMessageServiceServer) GetSoldados(context.Context, *SoldierRequest) (*SoldierAnswer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSoldados not implemented")
}
func (UnimplementedMessageServiceServer) Redirect(context.Context, *Address) (*Address, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Redirect not implemented")
}
func (UnimplementedMessageServiceServer) AddBase(context.Context, *Base) (*VectorClock, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddBase not implemented")
}
func (UnimplementedMessageServiceServer) RenameBase(context.Context, *Rename) (*VectorClock, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RenameBase not implemented")
}
func (UnimplementedMessageServiceServer) UpdateValue(context.Context, *Base) (*VectorClock, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateValue not implemented")
}
func (UnimplementedMessageServiceServer) DeleteBase(context.Context, *Base) (*VectorClock, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBase not implemented")
}
func (UnimplementedMessageServiceServer) mustEmbedUnimplementedMessageServiceServer() {}

// UnsafeMessageServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MessageServiceServer will
// result in compilation errors.
type UnsafeMessageServiceServer interface {
	mustEmbedUnimplementedMessageServiceServer()
}

func RegisterMessageServiceServer(s grpc.ServiceRegistrar, srv MessageServiceServer) {
	s.RegisterService(&MessageService_ServiceDesc, srv)
}

func _MessageService_GetSoldados_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SoldierRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServiceServer).GetSoldados(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.MessageService/GetSoldados",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServiceServer).GetSoldados(ctx, req.(*SoldierRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageService_Redirect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Address)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServiceServer).Redirect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.MessageService/Redirect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServiceServer).Redirect(ctx, req.(*Address))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageService_AddBase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Base)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServiceServer).AddBase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.MessageService/AddBase",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServiceServer).AddBase(ctx, req.(*Base))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageService_RenameBase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Rename)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServiceServer).RenameBase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.MessageService/RenameBase",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServiceServer).RenameBase(ctx, req.(*Rename))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageService_UpdateValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Base)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServiceServer).UpdateValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.MessageService/UpdateValue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServiceServer).UpdateValue(ctx, req.(*Base))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageService_DeleteBase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Base)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServiceServer).DeleteBase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.MessageService/DeleteBase",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServiceServer).DeleteBase(ctx, req.(*Base))
	}
	return interceptor(ctx, in, info, handler)
}

// MessageService_ServiceDesc is the grpc.ServiceDesc for MessageService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MessageService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "main.MessageService",
	HandlerType: (*MessageServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSoldados",
			Handler:    _MessageService_GetSoldados_Handler,
		},
		{
			MethodName: "Redirect",
			Handler:    _MessageService_Redirect_Handler,
		},
		{
			MethodName: "AddBase",
			Handler:    _MessageService_AddBase_Handler,
		},
		{
			MethodName: "RenameBase",
			Handler:    _MessageService_RenameBase_Handler,
		},
		{
			MethodName: "UpdateValue",
			Handler:    _MessageService_UpdateValue_Handler,
		},
		{
			MethodName: "DeleteBase",
			Handler:    _MessageService_DeleteBase_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "Proto/message.proto",
}
