// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: Proto/message.proto

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ServiceGuardianClient is the client API for ServiceGuardian service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ServiceGuardianClient interface {
	//Guardianes
	GetSoldados(ctx context.Context, in *SoldierRequest, opts ...grpc.CallOption) (*SoldierAnswer, error)
}

type serviceGuardianClient struct {
	cc grpc.ClientConnInterface
}

func NewServiceGuardianClient(cc grpc.ClientConnInterface) ServiceGuardianClient {
	return &serviceGuardianClient{cc}
}

func (c *serviceGuardianClient) GetSoldados(ctx context.Context, in *SoldierRequest, opts ...grpc.CallOption) (*SoldierAnswer, error) {
	out := new(SoldierAnswer)
	err := c.cc.Invoke(ctx, "/main.ServiceGuardian/GetSoldados", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServiceGuardianServer is the server API for ServiceGuardian service.
// All implementations must embed UnimplementedServiceGuardianServer
// for forward compatibility
type ServiceGuardianServer interface {
	//Guardianes
	GetSoldados(context.Context, *SoldierRequest) (*SoldierAnswer, error)
	mustEmbedUnimplementedServiceGuardianServer()
}

// UnimplementedServiceGuardianServer must be embedded to have forward compatible implementations.
type UnimplementedServiceGuardianServer struct {
}

func (UnimplementedServiceGuardianServer) GetSoldados(context.Context, *SoldierRequest) (*SoldierAnswer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSoldados not implemented")
}
func (UnimplementedServiceGuardianServer) mustEmbedUnimplementedServiceGuardianServer() {}

// UnsafeServiceGuardianServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServiceGuardianServer will
// result in compilation errors.
type UnsafeServiceGuardianServer interface {
	mustEmbedUnimplementedServiceGuardianServer()
}

func RegisterServiceGuardianServer(s grpc.ServiceRegistrar, srv ServiceGuardianServer) {
	s.RegisterService(&ServiceGuardian_ServiceDesc, srv)
}

func _ServiceGuardian_GetSoldados_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SoldierRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceGuardianServer).GetSoldados(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.ServiceGuardian/GetSoldados",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceGuardianServer).GetSoldados(ctx, req.(*SoldierRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ServiceGuardian_ServiceDesc is the grpc.ServiceDesc for ServiceGuardian service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ServiceGuardian_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "main.ServiceGuardian",
	HandlerType: (*ServiceGuardianServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSoldados",
			Handler:    _ServiceGuardian_GetSoldados_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "Proto/message.proto",
}

// ServiceVanguardiaClient is the client API for ServiceVanguardia service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ServiceVanguardiaClient interface {
	//Vanguardia
	AddBase(ctx context.Context, in *Base, opts ...grpc.CallOption) (*VectorClock, error)
	RenameBase(ctx context.Context, in *Rename, opts ...grpc.CallOption) (*VectorClock, error)
	UpdateValue(ctx context.Context, in *Base, opts ...grpc.CallOption) (*VectorClock, error)
	DeleteBase(ctx context.Context, in *Base, opts ...grpc.CallOption) (*VectorClock, error)
}

type serviceVanguardiaClient struct {
	cc grpc.ClientConnInterface
}

func NewServiceVanguardiaClient(cc grpc.ClientConnInterface) ServiceVanguardiaClient {
	return &serviceVanguardiaClient{cc}
}

func (c *serviceVanguardiaClient) AddBase(ctx context.Context, in *Base, opts ...grpc.CallOption) (*VectorClock, error) {
	out := new(VectorClock)
	err := c.cc.Invoke(ctx, "/main.ServiceVanguardia/AddBase", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceVanguardiaClient) RenameBase(ctx context.Context, in *Rename, opts ...grpc.CallOption) (*VectorClock, error) {
	out := new(VectorClock)
	err := c.cc.Invoke(ctx, "/main.ServiceVanguardia/RenameBase", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceVanguardiaClient) UpdateValue(ctx context.Context, in *Base, opts ...grpc.CallOption) (*VectorClock, error) {
	out := new(VectorClock)
	err := c.cc.Invoke(ctx, "/main.ServiceVanguardia/UpdateValue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceVanguardiaClient) DeleteBase(ctx context.Context, in *Base, opts ...grpc.CallOption) (*VectorClock, error) {
	out := new(VectorClock)
	err := c.cc.Invoke(ctx, "/main.ServiceVanguardia/DeleteBase", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServiceVanguardiaServer is the server API for ServiceVanguardia service.
// All implementations must embed UnimplementedServiceVanguardiaServer
// for forward compatibility
type ServiceVanguardiaServer interface {
	//Vanguardia
	AddBase(context.Context, *Base) (*VectorClock, error)
	RenameBase(context.Context, *Rename) (*VectorClock, error)
	UpdateValue(context.Context, *Base) (*VectorClock, error)
	DeleteBase(context.Context, *Base) (*VectorClock, error)
	mustEmbedUnimplementedServiceVanguardiaServer()
}

// UnimplementedServiceVanguardiaServer must be embedded to have forward compatible implementations.
type UnimplementedServiceVanguardiaServer struct {
}

func (UnimplementedServiceVanguardiaServer) AddBase(context.Context, *Base) (*VectorClock, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddBase not implemented")
}
func (UnimplementedServiceVanguardiaServer) RenameBase(context.Context, *Rename) (*VectorClock, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RenameBase not implemented")
}
func (UnimplementedServiceVanguardiaServer) UpdateValue(context.Context, *Base) (*VectorClock, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateValue not implemented")
}
func (UnimplementedServiceVanguardiaServer) DeleteBase(context.Context, *Base) (*VectorClock, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBase not implemented")
}
func (UnimplementedServiceVanguardiaServer) mustEmbedUnimplementedServiceVanguardiaServer() {}

// UnsafeServiceVanguardiaServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServiceVanguardiaServer will
// result in compilation errors.
type UnsafeServiceVanguardiaServer interface {
	mustEmbedUnimplementedServiceVanguardiaServer()
}

func RegisterServiceVanguardiaServer(s grpc.ServiceRegistrar, srv ServiceVanguardiaServer) {
	s.RegisterService(&ServiceVanguardia_ServiceDesc, srv)
}

func _ServiceVanguardia_AddBase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Base)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceVanguardiaServer).AddBase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.ServiceVanguardia/AddBase",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceVanguardiaServer).AddBase(ctx, req.(*Base))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceVanguardia_RenameBase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Rename)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceVanguardiaServer).RenameBase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.ServiceVanguardia/RenameBase",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceVanguardiaServer).RenameBase(ctx, req.(*Rename))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceVanguardia_UpdateValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Base)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceVanguardiaServer).UpdateValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.ServiceVanguardia/UpdateValue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceVanguardiaServer).UpdateValue(ctx, req.(*Base))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceVanguardia_DeleteBase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Base)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceVanguardiaServer).DeleteBase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.ServiceVanguardia/DeleteBase",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceVanguardiaServer).DeleteBase(ctx, req.(*Base))
	}
	return interceptor(ctx, in, info, handler)
}

// ServiceVanguardia_ServiceDesc is the grpc.ServiceDesc for ServiceVanguardia service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ServiceVanguardia_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "main.ServiceVanguardia",
	HandlerType: (*ServiceVanguardiaServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddBase",
			Handler:    _ServiceVanguardia_AddBase_Handler,
		},
		{
			MethodName: "RenameBase",
			Handler:    _ServiceVanguardia_RenameBase_Handler,
		},
		{
			MethodName: "UpdateValue",
			Handler:    _ServiceVanguardia_UpdateValue_Handler,
		},
		{
			MethodName: "DeleteBase",
			Handler:    _ServiceVanguardia_DeleteBase_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "Proto/message.proto",
}

// ServiceBrokerClient is the client API for ServiceBroker service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ServiceBrokerClient interface {
	Redirect(ctx context.Context, in *Address, opts ...grpc.CallOption) (*Address, error)
}

type serviceBrokerClient struct {
	cc grpc.ClientConnInterface
}

func NewServiceBrokerClient(cc grpc.ClientConnInterface) ServiceBrokerClient {
	return &serviceBrokerClient{cc}
}

func (c *serviceBrokerClient) Redirect(ctx context.Context, in *Address, opts ...grpc.CallOption) (*Address, error) {
	out := new(Address)
	err := c.cc.Invoke(ctx, "/main.ServiceBroker/Redirect", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServiceBrokerServer is the server API for ServiceBroker service.
// All implementations must embed UnimplementedServiceBrokerServer
// for forward compatibility
type ServiceBrokerServer interface {
	Redirect(context.Context, *Address) (*Address, error)
	mustEmbedUnimplementedServiceBrokerServer()
}

// UnimplementedServiceBrokerServer must be embedded to have forward compatible implementations.
type UnimplementedServiceBrokerServer struct {
}

func (UnimplementedServiceBrokerServer) Redirect(context.Context, *Address) (*Address, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Redirect not implemented")
}
func (UnimplementedServiceBrokerServer) mustEmbedUnimplementedServiceBrokerServer() {}

// UnsafeServiceBrokerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServiceBrokerServer will
// result in compilation errors.
type UnsafeServiceBrokerServer interface {
	mustEmbedUnimplementedServiceBrokerServer()
}

func RegisterServiceBrokerServer(s grpc.ServiceRegistrar, srv ServiceBrokerServer) {
	s.RegisterService(&ServiceBroker_ServiceDesc, srv)
}

func _ServiceBroker_Redirect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Address)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceBrokerServer).Redirect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.ServiceBroker/Redirect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceBrokerServer).Redirect(ctx, req.(*Address))
	}
	return interceptor(ctx, in, info, handler)
}

// ServiceBroker_ServiceDesc is the grpc.ServiceDesc for ServiceBroker service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ServiceBroker_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "main.ServiceBroker",
	HandlerType: (*ServiceBrokerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Redirect",
			Handler:    _ServiceBroker_Redirect_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "Proto/message.proto",
}
